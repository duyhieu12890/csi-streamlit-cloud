import os
import streamlit as st
from streamlit_app import sidebar_menu
import google.generativeai as genai
from dotenv import load_dotenv
import os
from IPython.display import display, Markdown
import pyrebase
import modules.libbase as libbase

sidebar_menu()

libbase.load_firebase()


if not st.session_state.get("IS_USER_LOGGED", False):
    st.warning("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng chatbox.")
    st.stop()

database = libbase.get_root_db()
if database is None:
    st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu Firebase. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.")
    st.stop()

google_api_key = st.secrets.get("GOOGLE_GEMINI_API", "GOOGLE_GEMINI_API")
if not google_api_key:
    raise ValueError("GOOGLE_API_KEY environment variable is not set.")

genai.configure(api_key=google_api_key)

model = genai.Model("gemma-3n-e4b-it")

# create_new_chat
# switch_from_dashboard
# switch_from_history
# switch_from_classify
messages_default = [{
    "role": "system",
    "content": """B·∫°n l√† Health Care AI. B·∫°n l√† m·ªôt chuy√™n gia v·ªÅ health v√† food, h√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe, dinh d∆∞·ª°ng t∆∞∆°ng ƒë∆∞∆°ng.
    H√£y tr·∫£ l·ªùi d·ªÖ hi·ªÉu. Tr√°nh s·ª≠ d·ª•ng t·ª´ ng·ªØ chuy√™n ng√†nh y khoa ph·ª©c t·∫°p.
    B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ:
    - Ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh
    - L·ªùi khuy√™n v·ªÅ dinh d∆∞·ª°ng
    - C√°ch duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh
    - C√°c m·∫πo t·∫≠p th·ªÉ d·ª•c
    - C√°ch qu·∫£n l√Ω cƒÉng th·∫≥ng
    - C√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe ph·ªï bi·∫øn
    ...

    Kh√¥ng tr·∫£ l·ªùi c√°c c√¢u h·ªèi ngo√†i ph·∫°m vi s·ª©c kh·ªèe v√† dinh d∆∞·ª°ng.
    """
}]

messages = []

get_history = libbase.get_root_db()[f"/users/{libbase.get_userId_logged()}/chat_history"].get()
user_interaction = st.session_state.get("chatbox_switch_from", None)
if user_interaction == "create_new_chat":
    pass
elif user_interaction == "switch_from_dashboard":
    messages.append({
        "role": "system",
        "content": f"""Ng∆∞·ªùi d√πng ƒë√£ import Dashboard v√†o Chat. H√£y ti·∫øp t·ª•c h·ªó tr·ª£ h·ªç v·ªõi c√°c c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe v√† dinh d∆∞·ª°ng.
        - C·∫•u tr√∫c c·ªßa data nh∆∞ sau: data[metric(V√≠ d·ª• c√¢n n·∫∑ng, chi·ªÅu cao, huy·∫øt √°p,...)][NƒÉm][Th√°ng][Ng√†y] = Gi√° tr·ªã
        - Data nh∆∞ sau: 
        
        """})
elif user_interaction == "switch_from_history":
    pass
elif user_interaction == "switch_from_classify":
    messages.append({
        "role": "system",
        "content": f"""Ng∆∞·ªùi d√πng ƒë√£ import Classify v√†o Chat. H√£y ti·∫øp t·ª•c h·ªó tr·ª£ h·ªç v·ªõi c√°c c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe v√† dinh d∆∞·ª°ng.
        - C·∫•u tr√∫c c·ªßa data nh∆∞ sau: data[metric(V√≠ d·ª• c√¢n n·∫∑ng, chi·ªÅu cao, huy·∫øt √°p,...)][NƒÉm][Th√°ng][Ng√†y] = Gi√° tr·ªã
        - Data nh∆∞ sau: {st.session_state.get("classify_data", "Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c nh·∫≠p.")}
        """})
    })



def chat():
    st.title("Chat v·ªõi AI")

    

    # Placeholder for chat interface
    user_input = st.chat_input("Ask me anything about health or food!")
    
    if user_input:
        # Simulate a response from the AI (this would be replaced with actual AI logic)
        response = f"AI Response to: {user_input}"
        st.write(response)

st.set_page_config(
    page_title="Chat with AI",
    layout="centered",
    page_icon="üí¨",
)
chat()
sidebar_menu()
